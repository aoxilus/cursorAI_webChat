# 🎤 DEEP FAKE AUDIO - CHATTERBOX TTS  **Sistema Profesional de Clonación de Voz con Chatterbox TTS**  [![Chatterbox TTS](https://img.shields.io/badge/Chatterbox-TTS-blue)](https://github.com/resemble-ai/chatterbox) [![Python 3.12](https://img.shields.io/badge/Python-3.12-green)](https://python.org) [![CUDA](https://img.shields.io/badge/CUDA-Supported-yellow)](https://developer.nvidia.com/cuda-toolkit) [![License MIT](https://img.shields.io/badge/License-MIT-green)](LICENSE)  ## 🚀 **CARACTERÍSTICAS**  - **🎯 Clonación REAL de Voz**: Usando Chatterbox TTS - el mejor clonador open source - **⚡ GPU Acceleration**: Procesamiento ultra-rápido con CUDA - **🎭 Control de Emoción**: Exaggeration control para voces expresivas - **🔒 Watermarking**: Perth watermarking integrado para responsabilidad - **🏗️ Arquitectura Modular**: Sistema escalable y mantenible - **💻 Interfaz PowerShell**: Scripts profesionales y fáciles de usar - **📊 Logging Avanzado**: Monitoreo completo del sistema  ## 📋 **REQUISITOS**  ### **Sistema** - Windows 10/11 - Python 3.12 - PowerShell 7+ - 8GB RAM mínimo (16GB recomendado) - GPU NVIDIA con CUDA (opcional pero recomendado)  ### **Software** - FFmpeg - Rust/Cargo (para dependencias) - Visual Studio Build Tools  ## 🛠️ **INSTALACIÓN**  ### **1. Clonar Repositorio** ```bash git clone <url-del-repositorio> cd deep_fake ```  ### **2. Instalar Dependencias del Sistema** ```powershell # Instalar Python 3.12 winget install Python.Python.3.12  # Instalar FFmpeg winget install Gyan.FFmpeg  # Instalar Rust winget install Rust.Rust ```  ### **3. Configurar Entorno Python** ```powershell # Crear entorno virtual py -3.12 -m venv venv_chatterbox  # Activar entorno .\venv_chatterbox\Scripts\Activate.ps1  # Instalar PyTorch con CUDA pip install torch torchaudio --index-url https://download.pytorch.org/whl/cu118  # Instalar Chatterbox TTS pip install chatterbox-tts ```  ### **4. Verificar Instalación** ```powershell # Ejecutar script de verificación .\scripts\verify_installation.ps1 ```  ## 🎯 **USO RÁPIDO**  ### **Clonar Voz Básica** ```powershell .\scripts\clone_voice.ps1 -AudioFile "samples/voice.wav" -Text "Hola, esta es mi voz clonada" -Output "output/cloned.wav" ```  ### **Clonar con Control de Emoción** ```powershell .\scripts\clone_voice.ps1 -AudioFile "samples/voice.wav" -Text "¡Hola mundo!" -Exaggeration 0.7 -CFGWeight 0.3 ```  ### **Procesar Lote de Archivos** ```powershell .\scripts\batch_clone.ps1 -VoiceDir "voices/" -TextFile "texts.txt" -OutputDir "output/" ```  ## 📁 **ESTRUCTURA DEL PROYECTO**  ``` deep_fake/ ├── src/ │   ├── chatterbox/          # Core de Chatterbox TTS │   │   ├── __init__.py │   │   ├── model.py         # Modelo principal │   │   ├── voice_manager.py # Gestión de voces │   │   └── processor.py     # Pipeline de procesamiento │   ├── utils/               # Utilidades │   │   ├── audio.py         # Procesamiento de audio │   │   ├── gpu.py           # Gestión GPU │   │   └── logger.py        # Sistema de logs │   ├── config/              # Configuraciones │   │   ├── settings.py      # Configuración general │   │   └── models.py        # Configuración de modelos │   ├── voices/              # Voces de referencia │   ├── output/              # Audio generado │   └── logs/                # Logs del sistema ├── scripts/                 # Scripts PowerShell │   ├── clone_voice.ps1      # Clonador principal │   ├── batch_clone.ps1      # Procesamiento por lotes │   ├── manage_voices.ps1    # Gestión de voces │   └── verify_installation.ps1 ├── docs/                    # Documentación │   ├── architecture/        # Arquitectura del sistema │   ├── api/                 # Documentación API │   └── installation/        # Guías de instalación ├── samples/                 # Archivos de ejemplo └── README.md               # Este archivo ```  ## 🔧 **CONFIGURACIÓN AVANZADA**  ### **Parámetros de Chatterbox** ```python # Configuración recomendada exaggeration = 0.5    # Control de emoción (0.0 - 1.0) cfg_weight = 0.5      # Control de calidad (0.0 - 1.0) ```  ### **Configuración GPU** ```python # Detección automática de GPU device = "cuda" if torch.cuda.is_available() else "cpu" ```  ### **Configuración de Audio** ```python # Parámetros de audio sample_rate = 22050    # Frecuencia de muestreo channels = 1           # Mono format = "wav"         # Formato de salida ```  ## 📊 **RENDIMIENTO**  ### **Benchmarks** - **GPU RTX 4090**: ~2-3 segundos por frase - **GPU RTX 3080**: ~4-5 segundos por frase - **CPU Intel i9**: ~15-20 segundos por frase  ### **Optimizaciones** - **Batch Processing**: Procesamiento por lotes - **Memory Management**: Gestión eficiente de memoria - **Model Caching**: Cache de modelos para reutilización  ## 🔒 **SEGURIDAD Y RESPONSABILIDAD**  ### **Perth Watermarking** - **Detección**: 100% accuracy - **Supervivencia**: MP3, edición, manipulación - **Imperceptible**: No afecta calidad de audio  ### **Uso Ético** - **Solo propósitos legítimos** - **Respeto a derechos de autor** - **Transparencia en uso**  ## 🐛 **SOLUCIÓN DE PROBLEMAS**  ### **Error: CUDA no disponible** ```powershell # Verificar instalación de CUDA nvidia-smi  # Reinstalar PyTorch con CUDA pip install torch torchaudio --index-url https://download.pytorch.org/whl/cu118 ```  ### **Error: Rust/Cargo no encontrado** ```powershell # Instalar Rust winget install Rust.Rust  # Recargar PATH refreshenv ```  ### **Error: FFmpeg no encontrado** ```powershell # Instalar FFmpeg winget install Gyan.FFmpeg  # Verificar instalación ffmpeg -version ```  ## 📈 **ROADMAP**  ### **Versión 1.1** - [ ] Interfaz web con Gradio - [ ] API REST para integración - [ ] Soporte para múltiples idiomas  ### **Versión 1.2** - [ ] Clustering para múltiples GPUs - [ ] Sistema de colas para procesamiento - [ ] Dashboard de monitoreo  ### **Versión 2.0** - [ ] Modelos personalizados - [ ] Fine-tuning de voces - [ ] Integración con servicios cloud  ## 🤝 **CONTRIBUCIONES**  1. Fork el proyecto 2. Crear rama de feature (`git checkout -b feature/AmazingFeature`) 3. Commit cambios (`git commit -m 'Add AmazingFeature'`) 4. Push a la rama (`git push origin feature/AmazingFeature`) 5. Abrir Pull Request  ## 📄 **LICENCIA**  Este proyecto está bajo la Licencia MIT. Ver `LICENSE` para más detalles.  ## 🙏 **AGRADECIMIENTOS**  - **Resemble AI** por Chatterbox TTS - **PyTorch** por el framework de IA - **NVIDIA** por CUDA  ## 📞 **CONTACTO**  - **Proyecto**: [GitHub Repository](https://github.com/your-repo/deep_fake) - **Issues**: [GitHub Issues](https://github.com/your-repo/deep_fake/issues) - **Documentación**: [docs/](docs/)  ---  **Desarrollado con ❤️ para clonación de voz profesional** 
